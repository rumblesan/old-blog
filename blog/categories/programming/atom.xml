<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | RumbleSan Heavy Noise Industries]]></title>
  <link href="http://rumblesan.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://rumblesan.com/"/>
  <updated>2012-12-16T21:45:30+00:00</updated>
  <id>http://rumblesan.com/</id>
  <author>
    <name><![CDATA[guy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cuttr is now live and running]]></title>
    <link href="http://rumblesan.com/blog/2012/09/11/cuttr-is-now-live-and-running/"/>
    <updated>2012-09-11T21:55:00+01:00</updated>
    <id>http://rumblesan.com/blog/2012/09/11/cuttr-is-now-live-and-running</id>
    <content type="html"><![CDATA[<p>So a second additing to the auto updating <a href="http://rumblesan.tumblr.com">Tumblr</a> is now live.</p>

<p><a href="https://github.com/rumblesan/cuttr">Cuttr</a> is written in scala and will apply randomised (but hopefully interesting) mathematically defined processes to the RGB values of an image.</p>

<p>Usual, <em>found on Tumblr, shown on Tumblr</em> rules apply.</p>

<p>I’m planning on adding a few more glitching possibilities to it but the early results are already pretty promising. Much of the time with this was actually spend wrestling with the OAuth stuff, made significantly easier due to the <a href="https://github.com/fernandezpablo85/scribe-java">Scribe</a> library. Also, I still don’t quite get reading of binary data in Scala. Should be easy, but never seems to be.</p>

<p>Anyway enjoy the results</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming is good for the soul]]></title>
    <link href="http://rumblesan.com/blog/2012/08/30/programming-is-good-for-the-soul/"/>
    <updated>2012-08-30T22:00:00+01:00</updated>
    <id>http://rumblesan.com/blog/2012/08/30/programming-is-good-for-the-soul</id>
    <content type="html"><![CDATA[<p>In the past couple of months I’ve found I’m drifting away from my usual audio hacking and concentrating more on just programming for the sake of programming.
Speculation leads me to believe this is down to me having a chance to learn a bunch of cool new stuff and generally just wanting to be a better software engineer.
This is just a quick roundup of what I’ve been up to and the projects I’ve been creating.</p>

<h2 id="diddy-vmhttprumblesancomdiddy-vm"><a href="http://rumblesan.com/diddy-vm/">Diddy-VM</a></h2>

<p>This is just a really basic Virtual Machine I wrote because I’ve not written one before. Eleven instructions, very basic memory model, no stack or registers and both Python and C implementations. I’ve written a simple assembler program so writing code for it can be done more easily but it’s really very limited. Did the job as a learning exercise though.</p>

<h2 id="dotfileshttpsgithubcomrumblesandotfiles"><a href="https://github.com/rumblesan/dotfiles">dotfiles</a></h2>

<p>Not really a programming project, but I’ve started having an active go at improving my workflow and an important part of that was to sort out a good bash environment. Having it on github means I can easily share it between home, work and any remote servers and I can keep track of what I’m testing out with it.</p>

<h2 id="cuttrhttpsgithubcomrumblesancuttr"><a href="https://github.com/rumblesan/cuttr">Cuttr</a></h2>

<p>Having gotten Glitchr working I decided to have a go at using Scala for some image processing. Cuttr will (once it’s all finished) allow you do define mathematical functions and apply them to the image, either as a whole or as separate colour layers.
It started with the idea being just to algorithmically cut them up but extended somewhat once I realised how simple it was.</p>

<h2 id="mandelbrothttpsgithubcomrumblesanmandelbrot"><a href="https://github.com/rumblesan/mandelbrot">Mandelbrot</a></h2>

<p>Every programmer should be able to render a Mandelbrot fractal, this is mine. Written in C, using SDL to display it and allows zooming and outputting to PNG. The code is actually reasonably neat as well!</p>

<h2 id="notestxthttpsgithubcomrumblesannotestxt"><a href="https://github.com/rumblesan/notes.txt">notes.txt</a></h2>

<p>Based along the same lines as the very minimal and very cool <a href="http://todotxt.com/">todo.txt</a>, this is a tiny command line app written in bash that allows me to quickly take notes. It’s pretty much functioning at the moment but I’m wanting to extend it with the ability to upload the notes to Evernote as well, once I’ve figured out what the hell their API is doing.</p>

<p>So that’s some of what’s been consuming my time recently, there are a handful of other smaller projects but none are in the sort of state where they’re of much interest. I do have some plans to start some SDL + OpenGL graphical experiments but there’s a bunch of maths I need to relearn first. Better get my nose in some good books.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Processing JS and GitHub hosting]]></title>
    <link href="http://rumblesan.com/blog/2012/04/29/processing-js-and-github-hosting/"/>
    <updated>2012-04-29T22:30:42+01:00</updated>
    <id>http://rumblesan.com/blog/2012/04/29/processing-js-and-github-hosting</id>
    <content type="html"><![CDATA[<p>So Processing.JS is pretty cool, this much we know. GitHub is also pretty cool, I don’t think anybody is going to deny that either.</p>

<p>It turns out that the two work really, really well together and because of this I decided to throw up a gallery of my Processing.JS sketches that’s hosted using githubs pages.</p>

<p>Check it out here <a href="http://rumblesan.github.com/ProcessingJS-Gallery/">http://rumblesan.github.com/ProcessingJS-Gallery/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being LAME and MAD, the trials of de/encoding MP3s]]></title>
    <link href="http://rumblesan.com/blog/2012/01/31/being-lame-and-mad-the-trials-of-deencoding-mp3s/"/>
    <updated>2012-01-31T22:08:00+00:00</updated>
    <id>http://rumblesan.com/blog/2012/01/31/being-lame-and-mad-the-trials-of-deencoding-mp3s</id>
    <content type="html"><![CDATA[<p>Reteaching myself C has been a pretty good exercise and, for the most part, has been good fun. A little frustrating at times, but there’s lots of stuff that’s just falling into place and it’s generally making me feel much smarter.</p>

<p>This feeling stopped when I started trying to deal with MP3s….</p>

<p>Encoding with libLAME isn’t too taxing thankfully. It took me a little bit of getting used to but I’m now happily reading WAV files, stretching samples and then pumping out MP3 files at the end. Encoding, however, is a different matter.</p>

<p>I’m using libMAD and I’m still finding it more than just a bit taxing to understand. I suspect that this is more likely my lack of knowledge than the library itself’s fault but to be honest, that just makes it that little bit more annoying.  On the plus side, it really does make me appreciate how easy all these high level scripting languages make things.</p>

<p>Anyway, enough of my whining, As far as SlowRadio is concerned, the project is steadily cruising along and things are looking pretty good. Thanks to some help from Paul I’ve been able to get a program that mostly recreates his algorithm. I haven’t put in any of the onset detection but tbh I’m saving that for a bit later when the other sticky bits are done.</p>

<p>Once I can successfully read in MP3s the next step will be to wrestle with libshout and libcurl so I can go spreading my merry noise across the InterBlag.</p>

<p>Just got to keep moseying along, and keep track of all these buffers right?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stretching Audio for Fun and Radio]]></title>
    <link href="http://rumblesan.com/blog/2012/01/01/stretching-audio-for-fun-and-radio/"/>
    <updated>2012-01-01T21:57:44+00:00</updated>
    <id>http://rumblesan.com/blog/2012/01/01/stretching-audio-for-fun-and-radio</id>
    <content type="html"><![CDATA[<p>Over the past two weeks, whilst taking some much needed time off from work, as well as enjoying the festive seasonal cheer I spent some time brushing up on my C skills. Part of the reason for this is because I’m embarking on a long running project involving pic chips, modular synths and actual hardware will need to get back to some good old fashioned embedded C. My other plan was to start on an idea I’ve had for a while and decided since it would involve quite a bit of DSP, I’d do it in C and use it as a learning exercise.</p>

<p>By now most people should have heard the <a href="http://www.youtube.com/watch?v=QspuCt1FM9M">Justin Bieber 800% slower</a> ”remix” that flew around the internet a little over a year ago. It uses <a href="http://hypermammut.sourceforge.net/paulstretch/">Paul’s Extreme Sound Stretch</a> to slow the song down without affecting the pitch, turning a fairly trite pop song into a truly amazing slab of monolithic, ambient noise. Essentially the program just takes many overlapping windows of audio, calculates the frequency spectrum using an FFT, randomizes the phase value for each frequency bin and then does the inverse FFT. There’s a little bit more magic to it than that, but that’s essentially it.</p>

<p>I’ve decided to create a radio station, much like PatchWerk Radio, that will download CC licensed audio from the internet at large, stretch the songs, and then stream them back out. To help matters along, Paul’s Stretch is <a href="https://github.com/paulnasca/paulstretch_cpp">open source software</a> so I’ve been able to dig into the internals and find out how it all fits together. At the moment the code is up on github and can be used to stretch audio and write it out to a new file. It doesn’t sound quite as good as Paul’s version because there’s a bit more DSP voodoo in his that I haven’t yet implemented but I’ll be getting on with that in the next couple of days.</p>

<p>Once I have that sounding good, the next step will be to get on with the audio finding and downloading, then interfacing it with shoutcast/oggcast. Given how quickly I’ve managed to hammer everything out so far I don’t think it’s too far off.</p>
]]></content>
  </entry>
  
</feed>
